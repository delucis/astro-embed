---
import { safeGet } from '@astro-community/astro-embed-utils';
import PreviewCard, { type MastodonPreviewCard } from './PreviewCard.astro';
import MediaAttachment, {
	type MastodonMediaAttachment,
} from './MediaAttachment.astro';
import './Toot.css';

export interface Props {
	id: string;
}
const { id } = Astro.props;

/**
 * Thanks to @astrojs/starlight
 * https://github.com/withastro/starlight/blob/8a861d16b586b019f61f30d93c61bdcd58e1503f/packages/starlight/utils/i18n.ts#L12
 *
 * A list of well-known right-to-left languages used as a fallback when determining the text
 * direction of a locale is not supported by the `Intl.Locale` API in the current environment.
 *
 * @see getLocaleDir()
 * @see https://en.wikipedia.org/wiki/IETF_language_tag#List_of_common_primary_language_subtags
 */
const wellKnownRTL = ['ar', 'fa', 'he', 'prs', 'ps', 'syc', 'ug', 'ur'];

// Regex to extract a toot ID from a Mastodon status URL
const idRegExp = /(\d+)$/;

// Thanks to @astrojs/starlight
// https://github.com/withastro/starlight/blob/8a861d16b586b019f61f30d93c61bdcd58e1503f/packages/starlight/utils/i18n.ts#L177-L188
function getLocaleDir(locale: Intl.Locale): 'ltr' | 'rtl' {
	if ('textInfo' in locale) {
		// @ts-expect-error - `textInfo` is not typed but is available in v8 based environments.
		return locale.textInfo.direction;
	} else if ('getTextInfo' in locale) {
		// @ts-expect-error - `getTextInfo` is not typed but is available in some non-v8 based environments.
		return locale.getTextInfo().direction;
	}
	// Firefox does not support `textInfo` or `getTextInfo` yet so we fallback to a well-known list
	// of right-to-left languages.
	return wellKnownRTL.includes(locale.language) ? 'rtl' : 'ltr';
}

function extractID(url: string) {
	const match = url.match(idRegExp);
	return match?.[0];
}

async function fetchToot(id: string) {
	const tootId = extractID(id);
	if (!tootId) throw new Error('Invalid toot URL');
	const data = (await safeGet(
		`${new URL(id).origin}/api/v1/statuses/${tootId}`
	)) as MastodonStatus | undefined;
	return data
		? { ...data, dir: getLocaleDir(new Intl.Locale(data.language)) }
		: undefined;
}

function replaceEmojis(text: string, emojis: MastodonCustomEmoji[]): string {
	for (const emoji of emojis) {
		text = text.replace(
			new RegExp(`:${emoji.shortcode}:`, 'g'),
			`<img alt=":${emoji.shortcode}:" class="mastodon-toot-emoji" src="${emoji.url}" />`
		);
	}
	return text;
}

// https://docs.joinmastodon.org/entities/Status/
interface MastodonStatus {
	account: {
		acct: string;
		display_name: string;
		emojis: MastodonCustomEmoji[];
		username: string;
	};
	card: MastodonPreviewCard | null;
	content: string;
	created_at: string;
	emojis: MastodonCustomEmoji[];
	language: string;
	media_attachments: MastodonMediaAttachment[];
	url: string;
}

// https://docs.joinmastodon.org/entities/Status/
export interface MastodonCustomEmoji {
	shortcode: string;
	url: string;
}

const toot = await fetchToot(id);
---

{
	toot && (
		<astro-embed-toot>
			<blockquote class="mastodon-toot">
				<div
					dir={toot.dir}
					lang={toot.language}
					set:html={replaceEmojis(toot.content, toot.emojis)}
				/>
				{toot.card && <PreviewCard card={toot.card} />}
				{toot.media_attachments.map((media) => (
					<MediaAttachment media={media} />
				))}
				<div>
					â€”
					<Fragment
						set:html={replaceEmojis(
							toot.account.display_name || toot.account.username,
							toot.account.emojis
						)}
					/>
					<> (@{toot.account.acct}) </>
					<a href={toot.url}>
						{new Date(toot.created_at).toLocaleDateString(undefined, {
							year: 'numeric',
							month: 'long',
							day: 'numeric',
						})}
					</a>
				</div>
			</blockquote>
		</astro-embed-toot>
	)
}
