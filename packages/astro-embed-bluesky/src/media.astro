---
import type { Post } from './types';
import { match } from 'ts-pattern';
import {
	AppBskyEmbedExternal,
	AppBskyEmbedImages,
	AppBskyEmbedRecord,
	AppBskyEmbedRecordWithMedia,
	AppBskyEmbedVideo,
} from '@atproto/api';
import External from './external.astro';
import ImageGrid from './image-grid.astro';
import VideoThumbnail from './video-thumbnail.astro';
import RecordWithMedia from './record-with-media.astro';
import Record from './record.astro';

interface Props {
	media: Post['embed'];
	postUrl: string;
	compact?: boolean | undefined;
}

const { media, postUrl, compact } = Astro.props;
---

{
	match(media)
		.when(AppBskyEmbedExternal.isView, (media) => (
			<External embed={media} compact={compact} />
		))
		.when(AppBskyEmbedImages.isView, (media) => (
			<a href={postUrl}>
				<ImageGrid images={media.images} />
			</a>
		))
		.when(AppBskyEmbedRecordWithMedia.isView, (media) => (
			<RecordWithMedia embed={media} postUrl={postUrl} compact={compact} />
		))
		.when(AppBskyEmbedRecord.isView, (media) => (
			<Record embed={media} compact={compact} />
		))
		.when(AppBskyEmbedVideo.isView, (media) => (
			<a href={postUrl}>
				<VideoThumbnail
					thumbnail={media.thumbnail}
					aspectRatio={media.aspectRatio}
				/>
			</a>
		))
		.otherwise((media) => media?.$type)
}
