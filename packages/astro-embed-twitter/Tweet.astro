---
import './Tweet.css';

type TweetTheme = 'light' | 'dark';

export interface Props {
	id: string;
	theme?: TweetTheme;
}

const { id, theme = 'light' } = Astro.props;

async function fetchTweet(id: string, theme: TweetTheme | undefined = 'light') {
	try {
		const oembedUrl = new URL('https://publish.twitter.com/oembed');
		oembedUrl.searchParams.set('url', id);
		oembedUrl.searchParams.set('omit_script', 'true');
		oembedUrl.searchParams.set('dnt', 'true');
		oembedUrl.searchParams.set('theme', theme);
		return (await fetch(oembedUrl).then((res) => res.json())) as {
			url: string;
			author_name: string;
			author_url: string;
			html: string;
		};
	} catch (e) {
		console.error(
			`[error]  astro-embed
         ${e.status} - ${e.statusText}: Failed to fetch tweet ${id}`
		);
	}
}

const tweet = await fetchTweet(id, theme);
---

{tweet && <astro-embed-tweet set:html={tweet.html} />}
